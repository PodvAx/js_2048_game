{"version":3,"sources":["scripts/main.js"],"names":["controlButton","document","querySelector","gameStartMessage","gameWinMessage","gameLoseMessage","gameField","gameScore","gameFieldArray","Array","from","querySelectorAll","map","row","fieldSize","length","score","isWinner","updateScore","textContent","addEventListener","classList","contains","confirm","restartGame","startGame","buttonChangeTo","btnText","value","getRandomEmptyCell","emptyCells","i","j","push","col","Math","floor","random","generateNewNumber","newValue","emptyCell","add","hideStartMessage","initalizeGame","handleMove","remove","forEach","cell","moveAndMergeCells","cells","direction","size","moved","mergeAndMove","line","filtered","filter","val","oldLine","JSON","stringify","reverse","column","eventr","key","result","Number","isGameOver","isGameWon","setTimeout","promptTheNewGame","message","newGame","removeEventListener","y","x"],"mappings":"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","file":"main.d5c4dacb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst controlButton = document.querySelector('.button');\nconst gameStartMessage = document.querySelector('.message-start');\nconst gameWinMessage = document.querySelector('.message-win');\nconst gameLoseMessage = document.querySelector('.message-lose');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst gameFieldArray = Array.from(gameField.querySelectorAll('.field-row'))\n  .map((row) => Array.from(row.querySelectorAll('.field-cell')));\nconst fieldSize = gameFieldArray.length;\n\nlet score = 0;\nlet isWinner = false;\n\nfunction updateScore() {\n  gameScore.textContent = score;\n}\n\ncontrolButton.addEventListener('click', () => {\n  if (controlButton.classList.contains('restart')) {\n    const answer = confirm(\n      `Are you sure you want to restart the game?`\n      + `Your score will be lost!`,\n    );\n\n    if (answer) {\n      restartGame();\n    }\n  } else {\n    startGame();\n  }\n});\n\nconst buttonChangeTo = (btnText) => {\n  switch (btnText) {\n    case 'Start':\n      controlButton.classList.value = 'button start';\n      controlButton.textContent = 'Start';\n      break;\n    case 'Restart':\n      controlButton.classList.value = 'button restart';\n      controlButton.textContent = 'Restart';\n      break;\n    default:\n      break;\n  }\n};\n\nconst getRandomEmptyCell = () => {\n  const emptyCells = [];\n\n  for (let i = 0; i < fieldSize; i++) {\n    for (let j = 0; j < fieldSize; j++) {\n      if (gameFieldArray[i][j].textContent === '') {\n        emptyCells.push({\n          row: i,\n          col: j,\n        });\n      }\n    }\n  }\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n};\n\nconst generateNewNumber = () => {\n  const newValue = Math.random() < 0.9 ? 2 : 4;\n  const emptyCell = getRandomEmptyCell();\n\n  if (emptyCell) {\n    const { row, col } = emptyCell;\n\n    gameFieldArray[row][col].textContent = newValue;\n    gameFieldArray[row][col].classList.add(`field-cell--${newValue}`);\n\n    gameFieldArray[row][col].classList.add(`new-cell`);\n  }\n};\n\nconst hideStartMessage = () => {\n  gameStartMessage.classList.add('hidden');\n};\n\nconst startGame = () => {\n  initalizeGame();\n  buttonChangeTo('Restart');\n  hideStartMessage();\n  document.addEventListener('keydown', handleMove);\n};\n\nconst restartGame = () => {\n  initalizeGame();\n\n  if (!gameWinMessage.classList.contains('hidden')) {\n    gameWinMessage.classList.add('hidden');\n  }\n\n  if (!gameLoseMessage.classList.contains('hidden')) {\n    gameLoseMessage.classList.add('hidden');\n  }\n};\n\nconst initalizeGame = () => {\n  if (gameField.classList.contains('game-field--lose')) {\n    gameField.classList.remove('game-field--lose');\n  }\n\n  gameFieldArray.forEach((row) => {\n    row.forEach((cell) => {\n      cell.textContent = '';\n      cell.classList.value = 'field-cell';\n    });\n  });\n\n  isWinner = false;\n  score = 0;\n  gameScore.textContent = 0;\n\n  generateNewNumber();\n  generateNewNumber();\n};\n\nfunction moveAndMergeCells(cells, direction) {\n  const size = cells.length;\n  let moved = false;\n\n  const mergeAndMove = (line) => {\n    let filtered = line.filter(val => val !== 0);\n    const oldLine = [...line];\n\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        filtered[i + 1] = 0;\n        score += filtered[i];\n      }\n    }\n    filtered = filtered.filter(val => val !== 0);\n\n    while (filtered.length < size) {\n      filtered.push(0);\n    }\n\n    if (JSON.stringify(oldLine) !== JSON.stringify(filtered)) {\n      moved = true;\n    }\n\n    return filtered;\n  };\n\n  if (direction === 'right' || direction === 'left') {\n    for (let i = 0; i < size; i++) {\n      let row = cells[i];\n\n      if (direction === 'right') {\n        row = row.reverse();\n      }\n      row = mergeAndMove(row);\n\n      if (direction === 'right') {\n        row = row.reverse();\n      }\n      cells[i] = row;\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      let column = cells.map(row => row[i]);\n\n      if (direction === 'down') {\n        column = column.reverse();\n      }\n      column = mergeAndMove(column);\n\n      if (direction === 'down') {\n        column = column.reverse();\n      }\n\n      for (let j = 0; j < size; j++) {\n        cells[j][i] = column[j];\n      }\n    }\n  }\n\n  return {\n    cells,\n    moved,\n  };\n}\n\nfunction handleMove(eventr) {\n  let direction;\n\n  switch (eventr.key) {\n    case 'ArrowUp': direction = 'up'; break;\n    case 'ArrowDown': direction = 'down'; break;\n    case 'ArrowLeft': direction = 'left'; break;\n    case 'ArrowRight': direction = 'right'; break;\n    default: return;\n  }\n\n  const cells = gameFieldArray.map(\n    row => row.map(cell => Number(cell.textContent) || 0),\n  );\n\n  const result = moveAndMergeCells(cells, direction);\n\n  if (result) {\n    gameFieldArray.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        const value = result.cells[i][j];\n\n        cell.textContent = value || '';\n        cell.classList.value = 'field-cell';\n\n        if (value) {\n          cell.classList.add(`field-cell--${value}`);\n        }\n      });\n    });\n\n    if (result.moved) {\n      generateNewNumber();\n    }\n    updateScore();\n\n    if (isGameOver(result.cells)) {\n      gameLoseMessage.classList.remove('hidden');\n      gameField.classList.add('game-field--lose');\n\n      //* comment this for pass the tests//\n      // setTimeout(() => {\n      //   promptTheNewGame('lose');\n      // }, 1000);\n    }\n\n    if (isGameWon(result.cells)) {\n      gameWinMessage.classList.remove('hidden');\n\n      if (!isWinner) {\n        setTimeout(() => {\n          isWinner = true;\n          promptTheNewGame('win');\n        }, 1000);\n      }\n    }\n  }\n}\n\nfunction promptTheNewGame(result) {\n  let message;\n\n  if (result === 'win') {\n    message = `Congratulations! You won! Your score is ${score}.`;\n  } else {\n    message = `Game over! Your score is ${score}.`;\n  }\n\n  const newGame = confirm(`${message} Do you want to start a new game?`);\n\n  if (newGame) {\n    restartGame();\n  } else if (result === 'win' && !newGame) {\n    return false;\n  } else {\n    buttonChangeTo('Start');\n    document.removeEventListener('keydown', handleMove);\n  }\n}\n\nfunction isGameOver(cells) {\n  const size = cells.length;\n\n  for (const row of cells) {\n    for (const cell of row) {\n      if (cell === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let y = 0; y < size; y++) {\n    for (let x = 0; x < size; x++) {\n      if (x < size - 1 && cells[y][x] === cells[y][x + 1]) {\n        return false;\n      }\n\n      if (y < size - 1 && cells[y][x] === cells[y + 1][x]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isGameWon(cells) {\n  for (const row of cells) {\n    for (const cell of row) {\n      if (cell === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}